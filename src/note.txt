一.输入验证
    1. 硬编码的方式, 即在动作类中编写输入验证
        * 当前动作类必须继承自ActionSupport,ActionSupport类除了实现Action接口,还实现了Validate,该接口就一个抽象方法validate方法;
        * validate方法用于验证该动作类中的所有动作执行前输入是否合法;
        * validate方法会早于动作方法之前执行,晚于getModel方法后执行;
        * 如果在validate方法汇总添加了错误输入验证失败的信息, 即调用了addActionError 或者调用了addFieldError方法,
          则该动作直接返回input结果,不在执行动作方法
        * 如果某个动作加入了输入验证,则必须在result结果中添加name="input"的处理方式,否则当出现验证失败时,找不对应的结果执行,会报错;
        * 错误信息可以在jsp页面使用struts标签<s:fieldError>或者<s:actionError>显示;
        * @SkipValidation 注解用于注明某个方法跳过验证;
        * 给某个方法加验证的方式为在动作类中添加名字为:public void validateXXX();其中XXX为该动作的动作方法的方法名,方法名首字母大写,例如
          给register方法添加输入验证,则方法名为validateRegister;


    2. 声明式验证, 即建立对应的配置文件(推荐的方式)
        * 给某一个动作类中的所有方法添加输入验证,则在动作类统计目录下建名字为XXX-validation.xml的配置文件.
        * 给某个动作类中的某个方法添加输入验证,则在动作类统计目录下建名字为XXX-YYY-validation.xml的配置文件,其中XXX为动作类的类名,
          YYY动作类中的动作方法名,必须要求完全一致;
        * 在输入验证配置文件中必须要加入validator的声明,参见 xwork/xwork-validator-1.0.x.dtd中的声明;
         <!DOCTYPE validators PUBLIC
                  "-//Apache Struts//XWork Validator 1.0.3//EN"
                  "http://struts.apache.org/dtds/xwork-validator-1.0.3.dtd">
        * 验证文件的跟标签是<validators>代表当前xml文件是一个验证文件;
        * <field> 给某个属性添加验证规则,其中name属性代表动作类中的某个属性;
        * <field-validator>: 属性验证规则,其中type属性对应了struts支持的常见规则,
          这些规则参见xwork/com/struts/validator/validators/default.xml的配置声明;
        * 常见的type有:
                * required: 空对象判断
                * requiredString: 空字符串判断
                * email: 邮箱判断
                * url : 地址判断
                * regex : 正则表达式判断
        * <field-validator>的子标签:
            > <message>:错误信息提示
            > <param>: 一般与正则表达式的regex使用,定义正则的规则;
    3. 自定义验证(仿照RequireStringValidator类编写)
        * 创建一个类继承FieldValidatorSupport, 覆写其验证方法validate(IDCardValidator);
        * 编写具体的验证方式:(validate方法内进行)
            * getFieldName(): 获得要验证的属性名称;
            * getFieldValue(): 获得要验证的属性值;
            * 根据获得的属性值进行相关的验证,如果IDCard格式验证,不符合条件调用addFieldError()方法添加输入验证失败信息;
        * 在src根目录下创建validators.xml文件,用于声明自定义验证类型; 声明方式参加xwork/validators/default.xml文件中的声明方式
          <validators>: 验证了类型标签
          <validator> : 某一的验证类型的声明, 该标签有两个属性,name自定义,外部访问名称;
                        class: 指向自定义输入验证的实现类(IDCardValidator)
        * 使用之定义验证类型,与requiredstring的用法一样,在<field-validator>标签中的type属性中是用声明的name名称(idcard);

二. 拦截器
    * struts提供了很多的拦截器,参见struts-default.xml文件, 当我门的package继承自struts-default时就继承了它里面定义的各种拦截器.
    * struts-default这个的默认拦截器栈是defaultStack;
    * 定义一个自定义拦截器的步骤:
        * 创建一个类继承AbstractInterceptor或者MethodFilterInterceptor;
          其中MethodFilterInterceptor是AbstractInterceptor的子类,该类多出了两个集合, excludeMethod:
          那些方法不拦截;includeMethod: 哪些方法拦截;
        * 覆写拦截器中的抽象方法interceptor或者doInterceptor;在拦截的方法中进行业务处理;
          其中invoke方法是拦截放行的方法;执行顺序: interceptor方法->invoke方法->动作方法->interceptor方法的返回;
        * 在struts.xml配置文件中对应的package下自定义拦截器的声明;
            * <interceptor>: 拦截器声明的根标签,里面可包含多个拦截器的声明;
            * <interceptor>: 单个拦截器的声明,其中该标签包含两个属性:
              name属性 : 自定义拦截器取个名字,唯一性;
              class属性: 指明自定义拦截器对应的类路径;
            * <interceptor> : 声明一个拦截器栈,里面可包含多个拦截器对象;
              该标签就一个name属性,即该拦截器栈的名称; 如果想往该栈中添加拦截器,则在该拦截器栈中添加子标签<interceptor-ref>
            * <interceptor-ref>: 标签代表使用某个拦截器,可以在拦截器栈中添加,也可以在action标签中指明某个action动作使用某个拦截器;
              改标签就一个name属性,表示使用的拦截器的名称;
            * <default-interceptor-ref>: 该标签表示当前package使用的默认拦截器是谁,可以和指向一个拦截器,也可以指向一个拦截器栈;
              该标签在<package>标签中被定义,要去放在当前包下所有action之前;
            注意: 在action或者package中指定的拦截器是某个自定义的拦截器,则系统的一系列拦截器均失效,
                  因此在使用自定义拦截器时通常采用的方式是定义一个拦截器栈,拦截器栈中包含自己定义的拦截器,同时还包含struts默认的拦截器栈defaultStack;















